// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: producerService.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ProducerService service

func NewProducerServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ProducerService service

type ProducerService interface {
	InsertProducer(ctx context.Context, in *InsertProducerRequest, opts ...client.CallOption) (*InsertProducerResponse, error)
	UpdateProducer(ctx context.Context, in *UpdateProducerRequest, opts ...client.CallOption) (*UpdateProducerResponse, error)
	SelectProducer(ctx context.Context, in *SelectProducerRequest, opts ...client.CallOption) (*SelectProducerResponse, error)
	DeleteProducer(ctx context.Context, in *DeleteProducerRequest, opts ...client.CallOption) (*DeleteProducerResponse, error)
}

type producerService struct {
	c    client.Client
	name string
}

func NewProducerService(name string, c client.Client) ProducerService {
	return &producerService{
		c:    c,
		name: name,
	}
}

func (c *producerService) InsertProducer(ctx context.Context, in *InsertProducerRequest, opts ...client.CallOption) (*InsertProducerResponse, error) {
	req := c.c.NewRequest(c.name, "ProducerService.InsertProducer", in)
	out := new(InsertProducerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerService) UpdateProducer(ctx context.Context, in *UpdateProducerRequest, opts ...client.CallOption) (*UpdateProducerResponse, error) {
	req := c.c.NewRequest(c.name, "ProducerService.UpdateProducer", in)
	out := new(UpdateProducerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerService) SelectProducer(ctx context.Context, in *SelectProducerRequest, opts ...client.CallOption) (*SelectProducerResponse, error) {
	req := c.c.NewRequest(c.name, "ProducerService.SelectProducer", in)
	out := new(SelectProducerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerService) DeleteProducer(ctx context.Context, in *DeleteProducerRequest, opts ...client.CallOption) (*DeleteProducerResponse, error) {
	req := c.c.NewRequest(c.name, "ProducerService.DeleteProducer", in)
	out := new(DeleteProducerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProducerService service

type ProducerServiceHandler interface {
	InsertProducer(context.Context, *InsertProducerRequest, *InsertProducerResponse) error
	UpdateProducer(context.Context, *UpdateProducerRequest, *UpdateProducerResponse) error
	SelectProducer(context.Context, *SelectProducerRequest, *SelectProducerResponse) error
	DeleteProducer(context.Context, *DeleteProducerRequest, *DeleteProducerResponse) error
}

func RegisterProducerServiceHandler(s server.Server, hdlr ProducerServiceHandler, opts ...server.HandlerOption) error {
	type producerService interface {
		InsertProducer(ctx context.Context, in *InsertProducerRequest, out *InsertProducerResponse) error
		UpdateProducer(ctx context.Context, in *UpdateProducerRequest, out *UpdateProducerResponse) error
		SelectProducer(ctx context.Context, in *SelectProducerRequest, out *SelectProducerResponse) error
		DeleteProducer(ctx context.Context, in *DeleteProducerRequest, out *DeleteProducerResponse) error
	}
	type ProducerService struct {
		producerService
	}
	h := &producerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProducerService{h}, opts...))
}

type producerServiceHandler struct {
	ProducerServiceHandler
}

func (h *producerServiceHandler) InsertProducer(ctx context.Context, in *InsertProducerRequest, out *InsertProducerResponse) error {
	return h.ProducerServiceHandler.InsertProducer(ctx, in, out)
}

func (h *producerServiceHandler) UpdateProducer(ctx context.Context, in *UpdateProducerRequest, out *UpdateProducerResponse) error {
	return h.ProducerServiceHandler.UpdateProducer(ctx, in, out)
}

func (h *producerServiceHandler) SelectProducer(ctx context.Context, in *SelectProducerRequest, out *SelectProducerResponse) error {
	return h.ProducerServiceHandler.SelectProducer(ctx, in, out)
}

func (h *producerServiceHandler) DeleteProducer(ctx context.Context, in *DeleteProducerRequest, out *DeleteProducerResponse) error {
	return h.ProducerServiceHandler.DeleteProducer(ctx, in, out)
}
