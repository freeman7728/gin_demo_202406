// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: listService.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ListService service

func NewListServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ListService service

type ListService interface {
	InsertList(ctx context.Context, in *ListInsertRequest, opts ...client.CallOption) (*ListInsertResponse, error)
	DeleteList(ctx context.Context, in *ListDeleteRequest, opts ...client.CallOption) (*ListDeleteResponse, error)
	UpdateList(ctx context.Context, in *ListUpdateRequest, opts ...client.CallOption) (*ListUpdateResponse, error)
	SelectList(ctx context.Context, in *ListSelectRequest, opts ...client.CallOption) (*ListSelectResponse, error)
}

type listService struct {
	c    client.Client
	name string
}

func NewListService(name string, c client.Client) ListService {
	return &listService{
		c:    c,
		name: name,
	}
}

func (c *listService) InsertList(ctx context.Context, in *ListInsertRequest, opts ...client.CallOption) (*ListInsertResponse, error) {
	req := c.c.NewRequest(c.name, "ListService.InsertList", in)
	out := new(ListInsertResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listService) DeleteList(ctx context.Context, in *ListDeleteRequest, opts ...client.CallOption) (*ListDeleteResponse, error) {
	req := c.c.NewRequest(c.name, "ListService.DeleteList", in)
	out := new(ListDeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listService) UpdateList(ctx context.Context, in *ListUpdateRequest, opts ...client.CallOption) (*ListUpdateResponse, error) {
	req := c.c.NewRequest(c.name, "ListService.UpdateList", in)
	out := new(ListUpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listService) SelectList(ctx context.Context, in *ListSelectRequest, opts ...client.CallOption) (*ListSelectResponse, error) {
	req := c.c.NewRequest(c.name, "ListService.SelectList", in)
	out := new(ListSelectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ListService service

type ListServiceHandler interface {
	InsertList(context.Context, *ListInsertRequest, *ListInsertResponse) error
	DeleteList(context.Context, *ListDeleteRequest, *ListDeleteResponse) error
	UpdateList(context.Context, *ListUpdateRequest, *ListUpdateResponse) error
	SelectList(context.Context, *ListSelectRequest, *ListSelectResponse) error
}

func RegisterListServiceHandler(s server.Server, hdlr ListServiceHandler, opts ...server.HandlerOption) error {
	type listService interface {
		InsertList(ctx context.Context, in *ListInsertRequest, out *ListInsertResponse) error
		DeleteList(ctx context.Context, in *ListDeleteRequest, out *ListDeleteResponse) error
		UpdateList(ctx context.Context, in *ListUpdateRequest, out *ListUpdateResponse) error
		SelectList(ctx context.Context, in *ListSelectRequest, out *ListSelectResponse) error
	}
	type ListService struct {
		listService
	}
	h := &listServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ListService{h}, opts...))
}

type listServiceHandler struct {
	ListServiceHandler
}

func (h *listServiceHandler) InsertList(ctx context.Context, in *ListInsertRequest, out *ListInsertResponse) error {
	return h.ListServiceHandler.InsertList(ctx, in, out)
}

func (h *listServiceHandler) DeleteList(ctx context.Context, in *ListDeleteRequest, out *ListDeleteResponse) error {
	return h.ListServiceHandler.DeleteList(ctx, in, out)
}

func (h *listServiceHandler) UpdateList(ctx context.Context, in *ListUpdateRequest, out *ListUpdateResponse) error {
	return h.ListServiceHandler.UpdateList(ctx, in, out)
}

func (h *listServiceHandler) SelectList(ctx context.Context, in *ListSelectRequest, out *ListSelectResponse) error {
	return h.ListServiceHandler.SelectList(ctx, in, out)
}
