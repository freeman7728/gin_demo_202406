// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: authService.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthService service

func NewAuthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthService service

type AuthService interface {
	RegisterToken(ctx context.Context, in *TokenRegisterReq, opts ...client.CallOption) (*TokenRegisterRsp, error)
	DiscoverToken(ctx context.Context, in *TokenDiscoveryReq, opts ...client.CallOption) (*TokenDiscoveryRsp, error)
	AuthorizeToken(ctx context.Context, in *TokenAuthorizationReq, opts ...client.CallOption) (*TokenAuthorizationRsp, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) RegisterToken(ctx context.Context, in *TokenRegisterReq, opts ...client.CallOption) (*TokenRegisterRsp, error) {
	req := c.c.NewRequest(c.name, "AuthService.RegisterToken", in)
	out := new(TokenRegisterRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) DiscoverToken(ctx context.Context, in *TokenDiscoveryReq, opts ...client.CallOption) (*TokenDiscoveryRsp, error) {
	req := c.c.NewRequest(c.name, "AuthService.DiscoverToken", in)
	out := new(TokenDiscoveryRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AuthorizeToken(ctx context.Context, in *TokenAuthorizationReq, opts ...client.CallOption) (*TokenAuthorizationRsp, error) {
	req := c.c.NewRequest(c.name, "AuthService.AuthorizeToken", in)
	out := new(TokenAuthorizationRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	RegisterToken(context.Context, *TokenRegisterReq, *TokenRegisterRsp) error
	DiscoverToken(context.Context, *TokenDiscoveryReq, *TokenDiscoveryRsp) error
	AuthorizeToken(context.Context, *TokenAuthorizationReq, *TokenAuthorizationRsp) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		RegisterToken(ctx context.Context, in *TokenRegisterReq, out *TokenRegisterRsp) error
		DiscoverToken(ctx context.Context, in *TokenDiscoveryReq, out *TokenDiscoveryRsp) error
		AuthorizeToken(ctx context.Context, in *TokenAuthorizationReq, out *TokenAuthorizationRsp) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) RegisterToken(ctx context.Context, in *TokenRegisterReq, out *TokenRegisterRsp) error {
	return h.AuthServiceHandler.RegisterToken(ctx, in, out)
}

func (h *authServiceHandler) DiscoverToken(ctx context.Context, in *TokenDiscoveryReq, out *TokenDiscoveryRsp) error {
	return h.AuthServiceHandler.DiscoverToken(ctx, in, out)
}

func (h *authServiceHandler) AuthorizeToken(ctx context.Context, in *TokenAuthorizationReq, out *TokenAuthorizationRsp) error {
	return h.AuthServiceHandler.AuthorizeToken(ctx, in, out)
}
