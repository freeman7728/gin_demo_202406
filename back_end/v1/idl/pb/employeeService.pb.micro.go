// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: employeeService.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for EmployeeService service

func NewEmployeeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for EmployeeService service

type EmployeeService interface {
	EmployeeSignup(ctx context.Context, in *EmployeeSignupRequest, opts ...client.CallOption) (*EmployeeSignupResponse, error)
	EmployeeLogin(ctx context.Context, in *EmployeeLoginRequest, opts ...client.CallOption) (*EmployeeLoginResponse, error)
	EmployeeUpdate(ctx context.Context, in *EmployeeUpdateRequest, opts ...client.CallOption) (*EmployeeUpdateResponse, error)
	EmployeeDelete(ctx context.Context, in *EmployeeDeleteRequest, opts ...client.CallOption) (*EmployeeDeleteResponse, error)
}

type employeeService struct {
	c    client.Client
	name string
}

func NewEmployeeService(name string, c client.Client) EmployeeService {
	return &employeeService{
		c:    c,
		name: name,
	}
}

func (c *employeeService) EmployeeSignup(ctx context.Context, in *EmployeeSignupRequest, opts ...client.CallOption) (*EmployeeSignupResponse, error) {
	req := c.c.NewRequest(c.name, "EmployeeService.EmployeeSignup", in)
	out := new(EmployeeSignupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeService) EmployeeLogin(ctx context.Context, in *EmployeeLoginRequest, opts ...client.CallOption) (*EmployeeLoginResponse, error) {
	req := c.c.NewRequest(c.name, "EmployeeService.EmployeeLogin", in)
	out := new(EmployeeLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeService) EmployeeUpdate(ctx context.Context, in *EmployeeUpdateRequest, opts ...client.CallOption) (*EmployeeUpdateResponse, error) {
	req := c.c.NewRequest(c.name, "EmployeeService.EmployeeUpdate", in)
	out := new(EmployeeUpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeService) EmployeeDelete(ctx context.Context, in *EmployeeDeleteRequest, opts ...client.CallOption) (*EmployeeDeleteResponse, error) {
	req := c.c.NewRequest(c.name, "EmployeeService.EmployeeDelete", in)
	out := new(EmployeeDeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmployeeService service

type EmployeeServiceHandler interface {
	EmployeeSignup(context.Context, *EmployeeSignupRequest, *EmployeeSignupResponse) error
	EmployeeLogin(context.Context, *EmployeeLoginRequest, *EmployeeLoginResponse) error
	EmployeeUpdate(context.Context, *EmployeeUpdateRequest, *EmployeeUpdateResponse) error
	EmployeeDelete(context.Context, *EmployeeDeleteRequest, *EmployeeDeleteResponse) error
}

func RegisterEmployeeServiceHandler(s server.Server, hdlr EmployeeServiceHandler, opts ...server.HandlerOption) error {
	type employeeService interface {
		EmployeeSignup(ctx context.Context, in *EmployeeSignupRequest, out *EmployeeSignupResponse) error
		EmployeeLogin(ctx context.Context, in *EmployeeLoginRequest, out *EmployeeLoginResponse) error
		EmployeeUpdate(ctx context.Context, in *EmployeeUpdateRequest, out *EmployeeUpdateResponse) error
		EmployeeDelete(ctx context.Context, in *EmployeeDeleteRequest, out *EmployeeDeleteResponse) error
	}
	type EmployeeService struct {
		employeeService
	}
	h := &employeeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EmployeeService{h}, opts...))
}

type employeeServiceHandler struct {
	EmployeeServiceHandler
}

func (h *employeeServiceHandler) EmployeeSignup(ctx context.Context, in *EmployeeSignupRequest, out *EmployeeSignupResponse) error {
	return h.EmployeeServiceHandler.EmployeeSignup(ctx, in, out)
}

func (h *employeeServiceHandler) EmployeeLogin(ctx context.Context, in *EmployeeLoginRequest, out *EmployeeLoginResponse) error {
	return h.EmployeeServiceHandler.EmployeeLogin(ctx, in, out)
}

func (h *employeeServiceHandler) EmployeeUpdate(ctx context.Context, in *EmployeeUpdateRequest, out *EmployeeUpdateResponse) error {
	return h.EmployeeServiceHandler.EmployeeUpdate(ctx, in, out)
}

func (h *employeeServiceHandler) EmployeeDelete(ctx context.Context, in *EmployeeDeleteRequest, out *EmployeeDeleteResponse) error {
	return h.EmployeeServiceHandler.EmployeeDelete(ctx, in, out)
}
